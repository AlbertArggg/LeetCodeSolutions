using System;


public class Program
{
    /*  Description:
     *  Given an array of integers nums and an integer target, return indices of the two numbers such that 
     *  they add up to target. You may assume that each input would have exactly one solution, and you may 
     *  not use the same element twice. You can return the answer in any order.
     *  
     *  Input: nums = [2,7,11,15], target = 9
     *  Output: [0,1]
     *  
     *  Input: nums = [3,2,4], target = 6
     *  Output: [1,2]
     *  
     *  Input: nums = [3,3], target = 6
     *  Output: [0,1]
     *  
     *  Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?
     */

    public static void Main(string[] args)
    {
        int[] nums1 = { 2, 7, 11, 15 };
        int target1 = 9;
        TwoSum_V1(nums1, target1);
        //TwoSum_V2(nums1, target1);

        int[] nums2 = { 3, 2, 4 };
        int target2 = 6;
        TwoSum_V1(nums1, target1);
        //TwoSum_V2(nums1, target1);

        int[] nums3 = { 3, 3 };
        int target3 = 6;
        TwoSum_V1(nums1, target1);
        //TwoSum_V2(nums1, target1);

        Console.WriteLine("Test");
    }

    public static string PrintResults()
    {
        
    }

    public static int[] TwoSum_V1(int[] nums, int target)       // Solution
    {
        
    }

    public static int[] TwoSum_V2(int[] nums, int target)       // Better Solution
    {

    }
}